// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/seats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fseats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fseats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fseats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fseats_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fseats_2eproto;
namespace sdv {
namespace edge {
namespace comfort {
namespace seats {
namespace v1 {
class CurrentPositionReply;
struct CurrentPositionReplyDefaultTypeInternal;
extern CurrentPositionReplyDefaultTypeInternal _CurrentPositionReply_default_instance_;
class CurrentPositionRequest;
struct CurrentPositionRequestDefaultTypeInternal;
extern CurrentPositionRequestDefaultTypeInternal _CurrentPositionRequest_default_instance_;
class MoveComponentReply;
struct MoveComponentReplyDefaultTypeInternal;
extern MoveComponentReplyDefaultTypeInternal _MoveComponentReply_default_instance_;
class MoveComponentRequest;
struct MoveComponentRequestDefaultTypeInternal;
extern MoveComponentRequestDefaultTypeInternal _MoveComponentRequest_default_instance_;
class MoveReply;
struct MoveReplyDefaultTypeInternal;
extern MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Seat;
struct SeatDefaultTypeInternal;
extern SeatDefaultTypeInternal _Seat_default_instance_;
class SeatLocation;
struct SeatLocationDefaultTypeInternal;
extern SeatLocationDefaultTypeInternal _SeatLocation_default_instance_;
}  // namespace v1
}  // namespace seats
}  // namespace comfort
}  // namespace edge
}  // namespace sdv
PROTOBUF_NAMESPACE_OPEN
template<> ::sdv::edge::comfort::seats::v1::CurrentPositionReply* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::CurrentPositionReply>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::CurrentPositionRequest* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::CurrentPositionRequest>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::MoveComponentReply* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::MoveComponentReply>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::MoveComponentRequest* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::MoveComponentRequest>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::MoveReply* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::MoveReply>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::MoveRequest* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::MoveRequest>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::Position* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::Position>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::Seat* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::Seat>(Arena*);
template<> ::sdv::edge::comfort::seats::v1::SeatLocation* Arena::CreateMaybeMessage<::sdv::edge::comfort::seats::v1::SeatLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sdv {
namespace edge {
namespace comfort {
namespace seats {
namespace v1 {

enum SeatComponent : int {
  BASE = 0,
  CUSHION = 1,
  LUMBAR = 2,
  SIDE_BOLSTER = 3,
  HEAD_RESTRAINT = 4,
  SeatComponent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SeatComponent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SeatComponent_IsValid(int value);
constexpr SeatComponent SeatComponent_MIN = BASE;
constexpr SeatComponent SeatComponent_MAX = HEAD_RESTRAINT;
constexpr int SeatComponent_ARRAYSIZE = SeatComponent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeatComponent_descriptor();
template<typename T>
inline const std::string& SeatComponent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SeatComponent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SeatComponent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SeatComponent_descriptor(), enum_t_value);
}
inline bool SeatComponent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SeatComponent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SeatComponent>(
    SeatComponent_descriptor(), name, value);
}
// ===================================================================

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatFieldNumber = 1,
  };
  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  bool has_seat() const;
  private:
  bool _internal_has_seat() const;
  public:
  void clear_seat();
  const ::sdv::edge::comfort::seats::v1::Seat& seat() const;
  PROTOBUF_NODISCARD ::sdv::edge::comfort::seats::v1::Seat* release_seat();
  ::sdv::edge::comfort::seats::v1::Seat* mutable_seat();
  void set_allocated_seat(::sdv::edge::comfort::seats::v1::Seat* seat);
  private:
  const ::sdv::edge::comfort::seats::v1::Seat& _internal_seat() const;
  ::sdv::edge::comfort::seats::v1::Seat* _internal_mutable_seat();
  public:
  void unsafe_arena_set_allocated_seat(
      ::sdv::edge::comfort::seats::v1::Seat* seat);
  ::sdv::edge::comfort::seats::v1::Seat* unsafe_arena_release_seat();

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sdv::edge::comfort::seats::v1::Seat* seat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class MoveReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.MoveReply) */ {
 public:
  inline MoveReply() : MoveReply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MoveReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveReply(const MoveReply& from);
  MoveReply(MoveReply&& from) noexcept
    : MoveReply() {
    *this = ::std::move(from);
  }

  inline MoveReply& operator=(const MoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveReply& operator=(MoveReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveReply* internal_default_instance() {
    return reinterpret_cast<const MoveReply*>(
               &_MoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveReply& a, MoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.MoveReply";
  }
  protected:
  explicit MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.MoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class MoveComponentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.MoveComponentRequest) */ {
 public:
  inline MoveComponentRequest() : MoveComponentRequest(nullptr) {}
  ~MoveComponentRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveComponentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveComponentRequest(const MoveComponentRequest& from);
  MoveComponentRequest(MoveComponentRequest&& from) noexcept
    : MoveComponentRequest() {
    *this = ::std::move(from);
  }

  inline MoveComponentRequest& operator=(const MoveComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveComponentRequest& operator=(MoveComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveComponentRequest* internal_default_instance() {
    return reinterpret_cast<const MoveComponentRequest*>(
               &_MoveComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveComponentRequest& a, MoveComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveComponentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveComponentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveComponentRequest& from) {
    MoveComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveComponentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.MoveComponentRequest";
  }
  protected:
  explicit MoveComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatFieldNumber = 1,
    kComponentFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // .sdv.edge.comfort.seats.v1.SeatLocation seat = 1;
  bool has_seat() const;
  private:
  bool _internal_has_seat() const;
  public:
  void clear_seat();
  const ::sdv::edge::comfort::seats::v1::SeatLocation& seat() const;
  PROTOBUF_NODISCARD ::sdv::edge::comfort::seats::v1::SeatLocation* release_seat();
  ::sdv::edge::comfort::seats::v1::SeatLocation* mutable_seat();
  void set_allocated_seat(::sdv::edge::comfort::seats::v1::SeatLocation* seat);
  private:
  const ::sdv::edge::comfort::seats::v1::SeatLocation& _internal_seat() const;
  ::sdv::edge::comfort::seats::v1::SeatLocation* _internal_mutable_seat();
  public:
  void unsafe_arena_set_allocated_seat(
      ::sdv::edge::comfort::seats::v1::SeatLocation* seat);
  ::sdv::edge::comfort::seats::v1::SeatLocation* unsafe_arena_release_seat();

  // .sdv.edge.comfort.seats.v1.SeatComponent component = 2;
  void clear_component();
  ::sdv::edge::comfort::seats::v1::SeatComponent component() const;
  void set_component(::sdv::edge::comfort::seats::v1::SeatComponent value);
  private:
  ::sdv::edge::comfort::seats::v1::SeatComponent _internal_component() const;
  void _internal_set_component(::sdv::edge::comfort::seats::v1::SeatComponent value);
  public:

  // int32 position = 3;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.MoveComponentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sdv::edge::comfort::seats::v1::SeatLocation* seat_;
    int component_;
    int32_t position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class MoveComponentReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.MoveComponentReply) */ {
 public:
  inline MoveComponentReply() : MoveComponentReply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MoveComponentReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveComponentReply(const MoveComponentReply& from);
  MoveComponentReply(MoveComponentReply&& from) noexcept
    : MoveComponentReply() {
    *this = ::std::move(from);
  }

  inline MoveComponentReply& operator=(const MoveComponentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveComponentReply& operator=(MoveComponentReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveComponentReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveComponentReply* internal_default_instance() {
    return reinterpret_cast<const MoveComponentReply*>(
               &_MoveComponentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveComponentReply& a, MoveComponentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveComponentReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveComponentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveComponentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveComponentReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveComponentReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveComponentReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.MoveComponentReply";
  }
  protected:
  explicit MoveComponentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.MoveComponentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class CurrentPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.CurrentPositionRequest) */ {
 public:
  inline CurrentPositionRequest() : CurrentPositionRequest(nullptr) {}
  ~CurrentPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR CurrentPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentPositionRequest(const CurrentPositionRequest& from);
  CurrentPositionRequest(CurrentPositionRequest&& from) noexcept
    : CurrentPositionRequest() {
    *this = ::std::move(from);
  }

  inline CurrentPositionRequest& operator=(const CurrentPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPositionRequest& operator=(CurrentPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentPositionRequest* internal_default_instance() {
    return reinterpret_cast<const CurrentPositionRequest*>(
               &_CurrentPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CurrentPositionRequest& a, CurrentPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrentPositionRequest& from) {
    CurrentPositionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.CurrentPositionRequest";
  }
  protected:
  explicit CurrentPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // uint32 row = 1;
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t row_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class CurrentPositionReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.CurrentPositionReply) */ {
 public:
  inline CurrentPositionReply() : CurrentPositionReply(nullptr) {}
  ~CurrentPositionReply() override;
  explicit PROTOBUF_CONSTEXPR CurrentPositionReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentPositionReply(const CurrentPositionReply& from);
  CurrentPositionReply(CurrentPositionReply&& from) noexcept
    : CurrentPositionReply() {
    *this = ::std::move(from);
  }

  inline CurrentPositionReply& operator=(const CurrentPositionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPositionReply& operator=(CurrentPositionReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentPositionReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentPositionReply* internal_default_instance() {
    return reinterpret_cast<const CurrentPositionReply*>(
               &_CurrentPositionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CurrentPositionReply& a, CurrentPositionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPositionReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentPositionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentPositionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentPositionReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentPositionReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrentPositionReply& from) {
    CurrentPositionReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPositionReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.CurrentPositionReply";
  }
  protected:
  explicit CurrentPositionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatFieldNumber = 1,
  };
  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  bool has_seat() const;
  private:
  bool _internal_has_seat() const;
  public:
  void clear_seat();
  const ::sdv::edge::comfort::seats::v1::Seat& seat() const;
  PROTOBUF_NODISCARD ::sdv::edge::comfort::seats::v1::Seat* release_seat();
  ::sdv::edge::comfort::seats::v1::Seat* mutable_seat();
  void set_allocated_seat(::sdv::edge::comfort::seats::v1::Seat* seat);
  private:
  const ::sdv::edge::comfort::seats::v1::Seat& _internal_seat() const;
  ::sdv::edge::comfort::seats::v1::Seat* _internal_mutable_seat();
  public:
  void unsafe_arena_set_allocated_seat(
      ::sdv::edge::comfort::seats::v1::Seat* seat);
  ::sdv::edge::comfort::seats::v1::Seat* unsafe_arena_release_seat();

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.CurrentPositionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sdv::edge::comfort::seats::v1::Seat* seat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class Seat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.Seat) */ {
 public:
  inline Seat() : Seat(nullptr) {}
  ~Seat() override;
  explicit PROTOBUF_CONSTEXPR Seat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Seat(const Seat& from);
  Seat(Seat&& from) noexcept
    : Seat() {
    *this = ::std::move(from);
  }

  inline Seat& operator=(const Seat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Seat& operator=(Seat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Seat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Seat* internal_default_instance() {
    return reinterpret_cast<const Seat*>(
               &_Seat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Seat& a, Seat& b) {
    a.Swap(&b);
  }
  inline void Swap(Seat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Seat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Seat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Seat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Seat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Seat& from) {
    Seat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Seat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.Seat";
  }
  protected:
  explicit Seat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // .sdv.edge.comfort.seats.v1.SeatLocation location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::sdv::edge::comfort::seats::v1::SeatLocation& location() const;
  PROTOBUF_NODISCARD ::sdv::edge::comfort::seats::v1::SeatLocation* release_location();
  ::sdv::edge::comfort::seats::v1::SeatLocation* mutable_location();
  void set_allocated_location(::sdv::edge::comfort::seats::v1::SeatLocation* location);
  private:
  const ::sdv::edge::comfort::seats::v1::SeatLocation& _internal_location() const;
  ::sdv::edge::comfort::seats::v1::SeatLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sdv::edge::comfort::seats::v1::SeatLocation* location);
  ::sdv::edge::comfort::seats::v1::SeatLocation* unsafe_arena_release_location();

  // .sdv.edge.comfort.seats.v1.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::sdv::edge::comfort::seats::v1::Position& position() const;
  PROTOBUF_NODISCARD ::sdv::edge::comfort::seats::v1::Position* release_position();
  ::sdv::edge::comfort::seats::v1::Position* mutable_position();
  void set_allocated_position(::sdv::edge::comfort::seats::v1::Position* position);
  private:
  const ::sdv::edge::comfort::seats::v1::Position& _internal_position() const;
  ::sdv::edge::comfort::seats::v1::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::sdv::edge::comfort::seats::v1::Position* position);
  ::sdv::edge::comfort::seats::v1::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.Seat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sdv::edge::comfort::seats::v1::SeatLocation* location_;
    ::sdv::edge::comfort::seats::v1::Position* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class SeatLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.SeatLocation) */ {
 public:
  inline SeatLocation() : SeatLocation(nullptr) {}
  ~SeatLocation() override;
  explicit PROTOBUF_CONSTEXPR SeatLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeatLocation(const SeatLocation& from);
  SeatLocation(SeatLocation&& from) noexcept
    : SeatLocation() {
    *this = ::std::move(from);
  }

  inline SeatLocation& operator=(const SeatLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeatLocation& operator=(SeatLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeatLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeatLocation* internal_default_instance() {
    return reinterpret_cast<const SeatLocation*>(
               &_SeatLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SeatLocation& a, SeatLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(SeatLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeatLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeatLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeatLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeatLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeatLocation& from) {
    SeatLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeatLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.SeatLocation";
  }
  protected:
  explicit SeatLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // uint32 row = 1;
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.SeatLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t row_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdv.edge.comfort.seats.v1.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdv.edge.comfort.seats.v1.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCushionFieldNumber = 2,
    kLumbarFieldNumber = 3,
    kSideBolsterFieldNumber = 4,
    kHeadRestraintFieldNumber = 5,
  };
  // int32 base = 1;
  void clear_base();
  int32_t base() const;
  void set_base(int32_t value);
  private:
  int32_t _internal_base() const;
  void _internal_set_base(int32_t value);
  public:

  // int32 cushion = 2;
  void clear_cushion();
  int32_t cushion() const;
  void set_cushion(int32_t value);
  private:
  int32_t _internal_cushion() const;
  void _internal_set_cushion(int32_t value);
  public:

  // int32 lumbar = 3;
  void clear_lumbar();
  int32_t lumbar() const;
  void set_lumbar(int32_t value);
  private:
  int32_t _internal_lumbar() const;
  void _internal_set_lumbar(int32_t value);
  public:

  // int32 side_bolster = 4;
  void clear_side_bolster();
  int32_t side_bolster() const;
  void set_side_bolster(int32_t value);
  private:
  int32_t _internal_side_bolster() const;
  void _internal_set_side_bolster(int32_t value);
  public:

  // int32 head_restraint = 5;
  void clear_head_restraint();
  int32_t head_restraint() const;
  void set_head_restraint(int32_t value);
  private:
  int32_t _internal_head_restraint() const;
  void _internal_set_head_restraint(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sdv.edge.comfort.seats.v1.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t base_;
    int32_t cushion_;
    int32_t lumbar_;
    int32_t side_bolster_;
    int32_t head_restraint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fseats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveRequest

// .sdv.edge.comfort.seats.v1.Seat seat = 1;
inline bool MoveRequest::_internal_has_seat() const {
  return this != internal_default_instance() && _impl_.seat_ != nullptr;
}
inline bool MoveRequest::has_seat() const {
  return _internal_has_seat();
}
inline void MoveRequest::clear_seat() {
  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
}
inline const ::sdv::edge::comfort::seats::v1::Seat& MoveRequest::_internal_seat() const {
  const ::sdv::edge::comfort::seats::v1::Seat* p = _impl_.seat_;
  return p != nullptr ? *p : reinterpret_cast<const ::sdv::edge::comfort::seats::v1::Seat&>(
      ::sdv::edge::comfort::seats::v1::_Seat_default_instance_);
}
inline const ::sdv::edge::comfort::seats::v1::Seat& MoveRequest::seat() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.MoveRequest.seat)
  return _internal_seat();
}
inline void MoveRequest::unsafe_arena_set_allocated_seat(
    ::sdv::edge::comfort::seats::v1::Seat* seat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seat_);
  }
  _impl_.seat_ = seat;
  if (seat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdv.edge.comfort.seats.v1.MoveRequest.seat)
}
inline ::sdv::edge::comfort::seats::v1::Seat* MoveRequest::release_seat() {
  
  ::sdv::edge::comfort::seats::v1::Seat* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Seat* MoveRequest::unsafe_arena_release_seat() {
  // @@protoc_insertion_point(field_release:sdv.edge.comfort.seats.v1.MoveRequest.seat)
  
  ::sdv::edge::comfort::seats::v1::Seat* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Seat* MoveRequest::_internal_mutable_seat() {
  
  if (_impl_.seat_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdv::edge::comfort::seats::v1::Seat>(GetArenaForAllocation());
    _impl_.seat_ = p;
  }
  return _impl_.seat_;
}
inline ::sdv::edge::comfort::seats::v1::Seat* MoveRequest::mutable_seat() {
  ::sdv::edge::comfort::seats::v1::Seat* _msg = _internal_mutable_seat();
  // @@protoc_insertion_point(field_mutable:sdv.edge.comfort.seats.v1.MoveRequest.seat)
  return _msg;
}
inline void MoveRequest::set_allocated_seat(::sdv::edge::comfort::seats::v1::Seat* seat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seat_;
  }
  if (seat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seat);
    if (message_arena != submessage_arena) {
      seat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seat_ = seat;
  // @@protoc_insertion_point(field_set_allocated:sdv.edge.comfort.seats.v1.MoveRequest.seat)
}

// -------------------------------------------------------------------

// MoveReply

// -------------------------------------------------------------------

// MoveComponentRequest

// .sdv.edge.comfort.seats.v1.SeatLocation seat = 1;
inline bool MoveComponentRequest::_internal_has_seat() const {
  return this != internal_default_instance() && _impl_.seat_ != nullptr;
}
inline bool MoveComponentRequest::has_seat() const {
  return _internal_has_seat();
}
inline void MoveComponentRequest::clear_seat() {
  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
}
inline const ::sdv::edge::comfort::seats::v1::SeatLocation& MoveComponentRequest::_internal_seat() const {
  const ::sdv::edge::comfort::seats::v1::SeatLocation* p = _impl_.seat_;
  return p != nullptr ? *p : reinterpret_cast<const ::sdv::edge::comfort::seats::v1::SeatLocation&>(
      ::sdv::edge::comfort::seats::v1::_SeatLocation_default_instance_);
}
inline const ::sdv::edge::comfort::seats::v1::SeatLocation& MoveComponentRequest::seat() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.MoveComponentRequest.seat)
  return _internal_seat();
}
inline void MoveComponentRequest::unsafe_arena_set_allocated_seat(
    ::sdv::edge::comfort::seats::v1::SeatLocation* seat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seat_);
  }
  _impl_.seat_ = seat;
  if (seat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdv.edge.comfort.seats.v1.MoveComponentRequest.seat)
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* MoveComponentRequest::release_seat() {
  
  ::sdv::edge::comfort::seats::v1::SeatLocation* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* MoveComponentRequest::unsafe_arena_release_seat() {
  // @@protoc_insertion_point(field_release:sdv.edge.comfort.seats.v1.MoveComponentRequest.seat)
  
  ::sdv::edge::comfort::seats::v1::SeatLocation* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* MoveComponentRequest::_internal_mutable_seat() {
  
  if (_impl_.seat_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdv::edge::comfort::seats::v1::SeatLocation>(GetArenaForAllocation());
    _impl_.seat_ = p;
  }
  return _impl_.seat_;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* MoveComponentRequest::mutable_seat() {
  ::sdv::edge::comfort::seats::v1::SeatLocation* _msg = _internal_mutable_seat();
  // @@protoc_insertion_point(field_mutable:sdv.edge.comfort.seats.v1.MoveComponentRequest.seat)
  return _msg;
}
inline void MoveComponentRequest::set_allocated_seat(::sdv::edge::comfort::seats::v1::SeatLocation* seat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seat_;
  }
  if (seat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seat);
    if (message_arena != submessage_arena) {
      seat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seat_ = seat;
  // @@protoc_insertion_point(field_set_allocated:sdv.edge.comfort.seats.v1.MoveComponentRequest.seat)
}

// .sdv.edge.comfort.seats.v1.SeatComponent component = 2;
inline void MoveComponentRequest::clear_component() {
  _impl_.component_ = 0;
}
inline ::sdv::edge::comfort::seats::v1::SeatComponent MoveComponentRequest::_internal_component() const {
  return static_cast< ::sdv::edge::comfort::seats::v1::SeatComponent >(_impl_.component_);
}
inline ::sdv::edge::comfort::seats::v1::SeatComponent MoveComponentRequest::component() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.MoveComponentRequest.component)
  return _internal_component();
}
inline void MoveComponentRequest::_internal_set_component(::sdv::edge::comfort::seats::v1::SeatComponent value) {
  
  _impl_.component_ = value;
}
inline void MoveComponentRequest::set_component(::sdv::edge::comfort::seats::v1::SeatComponent value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.MoveComponentRequest.component)
}

// int32 position = 3;
inline void MoveComponentRequest::clear_position() {
  _impl_.position_ = 0;
}
inline int32_t MoveComponentRequest::_internal_position() const {
  return _impl_.position_;
}
inline int32_t MoveComponentRequest::position() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.MoveComponentRequest.position)
  return _internal_position();
}
inline void MoveComponentRequest::_internal_set_position(int32_t value) {
  
  _impl_.position_ = value;
}
inline void MoveComponentRequest::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.MoveComponentRequest.position)
}

// -------------------------------------------------------------------

// MoveComponentReply

// -------------------------------------------------------------------

// CurrentPositionRequest

// uint32 row = 1;
inline void CurrentPositionRequest::clear_row() {
  _impl_.row_ = 0u;
}
inline uint32_t CurrentPositionRequest::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t CurrentPositionRequest::row() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.CurrentPositionRequest.row)
  return _internal_row();
}
inline void CurrentPositionRequest::_internal_set_row(uint32_t value) {
  
  _impl_.row_ = value;
}
inline void CurrentPositionRequest::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.CurrentPositionRequest.row)
}

// uint32 index = 2;
inline void CurrentPositionRequest::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t CurrentPositionRequest::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CurrentPositionRequest::index() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.CurrentPositionRequest.index)
  return _internal_index();
}
inline void CurrentPositionRequest::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void CurrentPositionRequest::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.CurrentPositionRequest.index)
}

// -------------------------------------------------------------------

// CurrentPositionReply

// .sdv.edge.comfort.seats.v1.Seat seat = 1;
inline bool CurrentPositionReply::_internal_has_seat() const {
  return this != internal_default_instance() && _impl_.seat_ != nullptr;
}
inline bool CurrentPositionReply::has_seat() const {
  return _internal_has_seat();
}
inline void CurrentPositionReply::clear_seat() {
  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
}
inline const ::sdv::edge::comfort::seats::v1::Seat& CurrentPositionReply::_internal_seat() const {
  const ::sdv::edge::comfort::seats::v1::Seat* p = _impl_.seat_;
  return p != nullptr ? *p : reinterpret_cast<const ::sdv::edge::comfort::seats::v1::Seat&>(
      ::sdv::edge::comfort::seats::v1::_Seat_default_instance_);
}
inline const ::sdv::edge::comfort::seats::v1::Seat& CurrentPositionReply::seat() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.CurrentPositionReply.seat)
  return _internal_seat();
}
inline void CurrentPositionReply::unsafe_arena_set_allocated_seat(
    ::sdv::edge::comfort::seats::v1::Seat* seat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seat_);
  }
  _impl_.seat_ = seat;
  if (seat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdv.edge.comfort.seats.v1.CurrentPositionReply.seat)
}
inline ::sdv::edge::comfort::seats::v1::Seat* CurrentPositionReply::release_seat() {
  
  ::sdv::edge::comfort::seats::v1::Seat* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Seat* CurrentPositionReply::unsafe_arena_release_seat() {
  // @@protoc_insertion_point(field_release:sdv.edge.comfort.seats.v1.CurrentPositionReply.seat)
  
  ::sdv::edge::comfort::seats::v1::Seat* temp = _impl_.seat_;
  _impl_.seat_ = nullptr;
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Seat* CurrentPositionReply::_internal_mutable_seat() {
  
  if (_impl_.seat_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdv::edge::comfort::seats::v1::Seat>(GetArenaForAllocation());
    _impl_.seat_ = p;
  }
  return _impl_.seat_;
}
inline ::sdv::edge::comfort::seats::v1::Seat* CurrentPositionReply::mutable_seat() {
  ::sdv::edge::comfort::seats::v1::Seat* _msg = _internal_mutable_seat();
  // @@protoc_insertion_point(field_mutable:sdv.edge.comfort.seats.v1.CurrentPositionReply.seat)
  return _msg;
}
inline void CurrentPositionReply::set_allocated_seat(::sdv::edge::comfort::seats::v1::Seat* seat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seat_;
  }
  if (seat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seat);
    if (message_arena != submessage_arena) {
      seat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seat_ = seat;
  // @@protoc_insertion_point(field_set_allocated:sdv.edge.comfort.seats.v1.CurrentPositionReply.seat)
}

// -------------------------------------------------------------------

// Seat

// .sdv.edge.comfort.seats.v1.SeatLocation location = 1;
inline bool Seat::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Seat::has_location() const {
  return _internal_has_location();
}
inline void Seat::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::sdv::edge::comfort::seats::v1::SeatLocation& Seat::_internal_location() const {
  const ::sdv::edge::comfort::seats::v1::SeatLocation* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sdv::edge::comfort::seats::v1::SeatLocation&>(
      ::sdv::edge::comfort::seats::v1::_SeatLocation_default_instance_);
}
inline const ::sdv::edge::comfort::seats::v1::SeatLocation& Seat::location() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Seat.location)
  return _internal_location();
}
inline void Seat::unsafe_arena_set_allocated_location(
    ::sdv::edge::comfort::seats::v1::SeatLocation* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdv.edge.comfort.seats.v1.Seat.location)
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* Seat::release_location() {
  
  ::sdv::edge::comfort::seats::v1::SeatLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* Seat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sdv.edge.comfort.seats.v1.Seat.location)
  
  ::sdv::edge::comfort::seats::v1::SeatLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* Seat::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdv::edge::comfort::seats::v1::SeatLocation>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::sdv::edge::comfort::seats::v1::SeatLocation* Seat::mutable_location() {
  ::sdv::edge::comfort::seats::v1::SeatLocation* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sdv.edge.comfort.seats.v1.Seat.location)
  return _msg;
}
inline void Seat::set_allocated_location(::sdv::edge::comfort::seats::v1::SeatLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sdv.edge.comfort.seats.v1.Seat.location)
}

// .sdv.edge.comfort.seats.v1.Position position = 2;
inline bool Seat::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Seat::has_position() const {
  return _internal_has_position();
}
inline void Seat::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::sdv::edge::comfort::seats::v1::Position& Seat::_internal_position() const {
  const ::sdv::edge::comfort::seats::v1::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::sdv::edge::comfort::seats::v1::Position&>(
      ::sdv::edge::comfort::seats::v1::_Position_default_instance_);
}
inline const ::sdv::edge::comfort::seats::v1::Position& Seat::position() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Seat.position)
  return _internal_position();
}
inline void Seat::unsafe_arena_set_allocated_position(
    ::sdv::edge::comfort::seats::v1::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdv.edge.comfort.seats.v1.Seat.position)
}
inline ::sdv::edge::comfort::seats::v1::Position* Seat::release_position() {
  
  ::sdv::edge::comfort::seats::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Position* Seat::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:sdv.edge.comfort.seats.v1.Seat.position)
  
  ::sdv::edge::comfort::seats::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::sdv::edge::comfort::seats::v1::Position* Seat::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdv::edge::comfort::seats::v1::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::sdv::edge::comfort::seats::v1::Position* Seat::mutable_position() {
  ::sdv::edge::comfort::seats::v1::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:sdv.edge.comfort.seats.v1.Seat.position)
  return _msg;
}
inline void Seat::set_allocated_position(::sdv::edge::comfort::seats::v1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:sdv.edge.comfort.seats.v1.Seat.position)
}

// -------------------------------------------------------------------

// SeatLocation

// uint32 row = 1;
inline void SeatLocation::clear_row() {
  _impl_.row_ = 0u;
}
inline uint32_t SeatLocation::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t SeatLocation::row() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.SeatLocation.row)
  return _internal_row();
}
inline void SeatLocation::_internal_set_row(uint32_t value) {
  
  _impl_.row_ = value;
}
inline void SeatLocation::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.SeatLocation.row)
}

// uint32 index = 2;
inline void SeatLocation::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t SeatLocation::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t SeatLocation::index() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.SeatLocation.index)
  return _internal_index();
}
inline void SeatLocation::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void SeatLocation::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.SeatLocation.index)
}

// -------------------------------------------------------------------

// Position

// int32 base = 1;
inline void Position::clear_base() {
  _impl_.base_ = 0;
}
inline int32_t Position::_internal_base() const {
  return _impl_.base_;
}
inline int32_t Position::base() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Position.base)
  return _internal_base();
}
inline void Position::_internal_set_base(int32_t value) {
  
  _impl_.base_ = value;
}
inline void Position::set_base(int32_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.Position.base)
}

// int32 cushion = 2;
inline void Position::clear_cushion() {
  _impl_.cushion_ = 0;
}
inline int32_t Position::_internal_cushion() const {
  return _impl_.cushion_;
}
inline int32_t Position::cushion() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Position.cushion)
  return _internal_cushion();
}
inline void Position::_internal_set_cushion(int32_t value) {
  
  _impl_.cushion_ = value;
}
inline void Position::set_cushion(int32_t value) {
  _internal_set_cushion(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.Position.cushion)
}

// int32 lumbar = 3;
inline void Position::clear_lumbar() {
  _impl_.lumbar_ = 0;
}
inline int32_t Position::_internal_lumbar() const {
  return _impl_.lumbar_;
}
inline int32_t Position::lumbar() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Position.lumbar)
  return _internal_lumbar();
}
inline void Position::_internal_set_lumbar(int32_t value) {
  
  _impl_.lumbar_ = value;
}
inline void Position::set_lumbar(int32_t value) {
  _internal_set_lumbar(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.Position.lumbar)
}

// int32 side_bolster = 4;
inline void Position::clear_side_bolster() {
  _impl_.side_bolster_ = 0;
}
inline int32_t Position::_internal_side_bolster() const {
  return _impl_.side_bolster_;
}
inline int32_t Position::side_bolster() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Position.side_bolster)
  return _internal_side_bolster();
}
inline void Position::_internal_set_side_bolster(int32_t value) {
  
  _impl_.side_bolster_ = value;
}
inline void Position::set_side_bolster(int32_t value) {
  _internal_set_side_bolster(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.Position.side_bolster)
}

// int32 head_restraint = 5;
inline void Position::clear_head_restraint() {
  _impl_.head_restraint_ = 0;
}
inline int32_t Position::_internal_head_restraint() const {
  return _impl_.head_restraint_;
}
inline int32_t Position::head_restraint() const {
  // @@protoc_insertion_point(field_get:sdv.edge.comfort.seats.v1.Position.head_restraint)
  return _internal_head_restraint();
}
inline void Position::_internal_set_head_restraint(int32_t value) {
  
  _impl_.head_restraint_ = value;
}
inline void Position::set_head_restraint(int32_t value) {
  _internal_set_head_restraint(value);
  // @@protoc_insertion_point(field_set:sdv.edge.comfort.seats.v1.Position.head_restraint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace seats
}  // namespace comfort
}  // namespace edge
}  // namespace sdv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sdv::edge::comfort::seats::v1::SeatComponent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sdv::edge::comfort::seats::v1::SeatComponent>() {
  return ::sdv::edge::comfort::seats::v1::SeatComponent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fseats_2eproto
