// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/seats.proto

#include "service/seats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sdv {
namespace edge {
namespace comfort {
namespace seats {
namespace v1 {
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveReply::MoveReply(
    ::_pbi::ConstantInitialized) {}
struct MoveReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveReplyDefaultTypeInternal() {}
  union {
    MoveReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
PROTOBUF_CONSTEXPR MoveComponentRequest::MoveComponentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seat_)*/nullptr
  , /*decltype(_impl_.component_)*/0
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveComponentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveComponentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveComponentRequestDefaultTypeInternal() {}
  union {
    MoveComponentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveComponentRequestDefaultTypeInternal _MoveComponentRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveComponentReply::MoveComponentReply(
    ::_pbi::ConstantInitialized) {}
struct MoveComponentReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveComponentReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveComponentReplyDefaultTypeInternal() {}
  union {
    MoveComponentReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveComponentReplyDefaultTypeInternal _MoveComponentReply_default_instance_;
PROTOBUF_CONSTEXPR CurrentPositionRequest::CurrentPositionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrentPositionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentPositionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentPositionRequestDefaultTypeInternal() {}
  union {
    CurrentPositionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentPositionRequestDefaultTypeInternal _CurrentPositionRequest_default_instance_;
PROTOBUF_CONSTEXPR CurrentPositionReply::CurrentPositionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrentPositionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentPositionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentPositionReplyDefaultTypeInternal() {}
  union {
    CurrentPositionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentPositionReplyDefaultTypeInternal _CurrentPositionReply_default_instance_;
PROTOBUF_CONSTEXPR Seat::Seat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeatDefaultTypeInternal() {}
  union {
    Seat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeatDefaultTypeInternal _Seat_default_instance_;
PROTOBUF_CONSTEXPR SeatLocation::SeatLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeatLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeatLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeatLocationDefaultTypeInternal() {}
  union {
    SeatLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeatLocationDefaultTypeInternal _SeatLocation_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/0
  , /*decltype(_impl_.cushion_)*/0
  , /*decltype(_impl_.lumbar_)*/0
  , /*decltype(_impl_.side_bolster_)*/0
  , /*decltype(_impl_.head_restraint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace v1
}  // namespace seats
}  // namespace comfort
}  // namespace edge
}  // namespace sdv
static ::_pb::Metadata file_level_metadata_service_2fseats_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_service_2fseats_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fseats_2eproto = nullptr;

const uint32_t TableStruct_service_2fseats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveRequest, _impl_.seat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveComponentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveComponentRequest, _impl_.seat_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveComponentRequest, _impl_.component_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveComponentRequest, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::MoveComponentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::CurrentPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::CurrentPositionRequest, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::CurrentPositionRequest, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::CurrentPositionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::CurrentPositionReply, _impl_.seat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Seat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Seat, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Seat, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::SeatLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::SeatLocation, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::SeatLocation, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _impl_.cushion_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _impl_.lumbar_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _impl_.side_bolster_),
  PROTOBUF_FIELD_OFFSET(::sdv::edge::comfort::seats::v1::Position, _impl_.head_restraint_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::MoveRequest)},
  { 7, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::MoveReply)},
  { 13, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::MoveComponentRequest)},
  { 22, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::MoveComponentReply)},
  { 28, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::CurrentPositionRequest)},
  { 36, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::CurrentPositionReply)},
  { 43, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::Seat)},
  { 51, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::SeatLocation)},
  { 59, -1, -1, sizeof(::sdv::edge::comfort::seats::v1::Position)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sdv::edge::comfort::seats::v1::_MoveRequest_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_MoveReply_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_MoveComponentRequest_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_MoveComponentReply_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_CurrentPositionRequest_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_CurrentPositionReply_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_Seat_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_SeatLocation_default_instance_._instance,
  &::sdv::edge::comfort::seats::v1::_Position_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fseats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023service/seats.proto\022\031sdv.edge.comfort."
  "seats.v1\"<\n\013MoveRequest\022-\n\004seat\030\001 \001(\0132\037."
  "sdv.edge.comfort.seats.v1.Seat\"\013\n\tMoveRe"
  "ply\"\234\001\n\024MoveComponentRequest\0225\n\004seat\030\001 \001"
  "(\0132\'.sdv.edge.comfort.seats.v1.SeatLocat"
  "ion\022;\n\tcomponent\030\002 \001(\0162(.sdv.edge.comfor"
  "t.seats.v1.SeatComponent\022\020\n\010position\030\003 \001"
  "(\005\"\024\n\022MoveComponentReply\"4\n\026CurrentPosit"
  "ionRequest\022\013\n\003row\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\"E"
  "\n\024CurrentPositionReply\022-\n\004seat\030\001 \001(\0132\037.s"
  "dv.edge.comfort.seats.v1.Seat\"x\n\004Seat\0229\n"
  "\010location\030\001 \001(\0132\'.sdv.edge.comfort.seats"
  ".v1.SeatLocation\0225\n\010position\030\002 \001(\0132#.sdv"
  ".edge.comfort.seats.v1.Position\"*\n\014SeatL"
  "ocation\022\013\n\003row\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\"g\n\010P"
  "osition\022\014\n\004base\030\001 \001(\005\022\017\n\007cushion\030\002 \001(\005\022\016"
  "\n\006lumbar\030\003 \001(\005\022\024\n\014side_bolster\030\004 \001(\005\022\026\n\016"
  "head_restraint\030\005 \001(\005*X\n\rSeatComponent\022\010\n"
  "\004BASE\020\000\022\013\n\007CUSHION\020\001\022\n\n\006LUMBAR\020\002\022\020\n\014SIDE"
  "_BOLSTER\020\003\022\022\n\016HEAD_RESTRAINT\020\0042\305\002\n\005Seats"
  "\022T\n\004Move\022&.sdv.edge.comfort.seats.v1.Mov"
  "eRequest\032$.sdv.edge.comfort.seats.v1.Mov"
  "eReply\022o\n\rMoveComponent\022/.sdv.edge.comfo"
  "rt.seats.v1.MoveComponentRequest\032-.sdv.e"
  "dge.comfort.seats.v1.MoveComponentReply\022"
  "u\n\017CurrentPosition\0221.sdv.edge.comfort.se"
  "ats.v1.CurrentPositionRequest\032/.sdv.edge"
  ".comfort.seats.v1.CurrentPositionReplyb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_service_2fseats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fseats_2eproto = {
    false, false, 1126, descriptor_table_protodef_service_2fseats_2eproto,
    "service/seats.proto",
    &descriptor_table_service_2fseats_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_service_2fseats_2eproto::offsets,
    file_level_metadata_service_2fseats_2eproto, file_level_enum_descriptors_service_2fseats_2eproto,
    file_level_service_descriptors_service_2fseats_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fseats_2eproto_getter() {
  return &descriptor_table_service_2fseats_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fseats_2eproto(&descriptor_table_service_2fseats_2eproto);
namespace sdv {
namespace edge {
namespace comfort {
namespace seats {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeatComponent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2fseats_2eproto);
  return file_level_enum_descriptors_service_2fseats_2eproto[0];
}
bool SeatComponent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MoveRequest::_Internal {
 public:
  static const ::sdv::edge::comfort::seats::v1::Seat& seat(const MoveRequest* msg);
};

const ::sdv::edge::comfort::seats::v1::Seat&
MoveRequest::_Internal::seat(const MoveRequest* msg) {
  return *msg->_impl_.seat_;
}
MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_seat()) {
    _this->_impl_.seat_ = new ::sdv::edge::comfort::seats::v1::Seat(*from._impl_.seat_);
  }
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.MoveRequest)
}

inline void MoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.seat_;
}

void MoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sdv.edge.comfort.seats.v1.Seat seat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  if (this->_internal_has_seat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seat(this),
        _Internal::seat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  if (this->_internal_has_seat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }


void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRequest*>(&to_msg);
  auto& from = static_cast<const MoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.MoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seat()) {
    _this->_internal_mutable_seat()->::sdv::edge::comfort::seats::v1::Seat::MergeFrom(
        from._internal_seat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seat_, other->_impl_.seat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[0]);
}

// ===================================================================

class MoveReply::_Internal {
 public:
};

MoveReply::MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.MoveReply)
}
MoveReply::MoveReply(const MoveReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MoveReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.MoveReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MoveReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[1]);
}

// ===================================================================

class MoveComponentRequest::_Internal {
 public:
  static const ::sdv::edge::comfort::seats::v1::SeatLocation& seat(const MoveComponentRequest* msg);
};

const ::sdv::edge::comfort::seats::v1::SeatLocation&
MoveComponentRequest::_Internal::seat(const MoveComponentRequest* msg) {
  return *msg->_impl_.seat_;
}
MoveComponentRequest::MoveComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.MoveComponentRequest)
}
MoveComponentRequest::MoveComponentRequest(const MoveComponentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveComponentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , decltype(_impl_.component_){}
    , decltype(_impl_.position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_seat()) {
    _this->_impl_.seat_ = new ::sdv::edge::comfort::seats::v1::SeatLocation(*from._impl_.seat_);
  }
  ::memcpy(&_impl_.component_, &from._impl_.component_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_) -
    reinterpret_cast<char*>(&_impl_.component_)) + sizeof(_impl_.position_));
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.MoveComponentRequest)
}

inline void MoveComponentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , decltype(_impl_.component_){0}
    , decltype(_impl_.position_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveComponentRequest::~MoveComponentRequest() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveComponentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.seat_;
}

void MoveComponentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveComponentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
  ::memset(&_impl_.component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_) -
      reinterpret_cast<char*>(&_impl_.component_)) + sizeof(_impl_.position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveComponentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sdv.edge.comfort.seats.v1.SeatLocation seat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sdv.edge.comfort.seats.v1.SeatComponent component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_component(static_cast<::sdv::edge::comfort::seats::v1::SeatComponent>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveComponentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.SeatLocation seat = 1;
  if (this->_internal_has_seat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seat(this),
        _Internal::seat(this).GetCachedSize(), target, stream);
  }

  // .sdv.edge.comfort.seats.v1.SeatComponent component = 2;
  if (this->_internal_component() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_component(), target);
  }

  // int32 position = 3;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  return target;
}

size_t MoveComponentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.SeatLocation seat = 1;
  if (this->_internal_has_seat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seat_);
  }

  // .sdv.edge.comfort.seats.v1.SeatComponent component = 2;
  if (this->_internal_component() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_component());
  }

  // int32 position = 3;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveComponentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveComponentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveComponentRequest::GetClassData() const { return &_class_data_; }


void MoveComponentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveComponentRequest*>(&to_msg);
  auto& from = static_cast<const MoveComponentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seat()) {
    _this->_internal_mutable_seat()->::sdv::edge::comfort::seats::v1::SeatLocation::MergeFrom(
        from._internal_seat());
  }
  if (from._internal_component() != 0) {
    _this->_internal_set_component(from._internal_component());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveComponentRequest::CopyFrom(const MoveComponentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.MoveComponentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveComponentRequest::IsInitialized() const {
  return true;
}

void MoveComponentRequest::InternalSwap(MoveComponentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveComponentRequest, _impl_.position_)
      + sizeof(MoveComponentRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(MoveComponentRequest, _impl_.seat_)>(
          reinterpret_cast<char*>(&_impl_.seat_),
          reinterpret_cast<char*>(&other->_impl_.seat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveComponentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[2]);
}

// ===================================================================

class MoveComponentReply::_Internal {
 public:
};

MoveComponentReply::MoveComponentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.MoveComponentReply)
}
MoveComponentReply::MoveComponentReply(const MoveComponentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MoveComponentReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.MoveComponentReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveComponentReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveComponentReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MoveComponentReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[3]);
}

// ===================================================================

class CurrentPositionRequest::_Internal {
 public:
};

CurrentPositionRequest::CurrentPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
}
CurrentPositionRequest::CurrentPositionRequest(const CurrentPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrentPositionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
}

inline void CurrentPositionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){0u}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrentPositionRequest::~CurrentPositionRequest() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentPositionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrentPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentPositionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentPositionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  return target;
}

size_t CurrentPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentPositionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrentPositionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentPositionRequest::GetClassData() const { return &_class_data_; }


void CurrentPositionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrentPositionRequest*>(&to_msg);
  auto& from = static_cast<const CurrentPositionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentPositionRequest::CopyFrom(const CurrentPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.CurrentPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionRequest::IsInitialized() const {
  return true;
}

void CurrentPositionRequest::InternalSwap(CurrentPositionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentPositionRequest, _impl_.index_)
      + sizeof(CurrentPositionRequest::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CurrentPositionRequest, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentPositionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[4]);
}

// ===================================================================

class CurrentPositionReply::_Internal {
 public:
  static const ::sdv::edge::comfort::seats::v1::Seat& seat(const CurrentPositionReply* msg);
};

const ::sdv::edge::comfort::seats::v1::Seat&
CurrentPositionReply::_Internal::seat(const CurrentPositionReply* msg) {
  return *msg->_impl_.seat_;
}
CurrentPositionReply::CurrentPositionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.CurrentPositionReply)
}
CurrentPositionReply::CurrentPositionReply(const CurrentPositionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrentPositionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_seat()) {
    _this->_impl_.seat_ = new ::sdv::edge::comfort::seats::v1::Seat(*from._impl_.seat_);
  }
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.CurrentPositionReply)
}

inline void CurrentPositionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrentPositionReply::~CurrentPositionReply() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentPositionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.seat_;
}

void CurrentPositionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrentPositionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.seat_ != nullptr) {
    delete _impl_.seat_;
  }
  _impl_.seat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentPositionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sdv.edge.comfort.seats.v1.Seat seat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentPositionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  if (this->_internal_has_seat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seat(this),
        _Internal::seat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  return target;
}

size_t CurrentPositionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.Seat seat = 1;
  if (this->_internal_has_seat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentPositionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrentPositionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentPositionReply::GetClassData() const { return &_class_data_; }


void CurrentPositionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrentPositionReply*>(&to_msg);
  auto& from = static_cast<const CurrentPositionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seat()) {
    _this->_internal_mutable_seat()->::sdv::edge::comfort::seats::v1::Seat::MergeFrom(
        from._internal_seat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentPositionReply::CopyFrom(const CurrentPositionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.CurrentPositionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionReply::IsInitialized() const {
  return true;
}

void CurrentPositionReply::InternalSwap(CurrentPositionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seat_, other->_impl_.seat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentPositionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[5]);
}

// ===================================================================

class Seat::_Internal {
 public:
  static const ::sdv::edge::comfort::seats::v1::SeatLocation& location(const Seat* msg);
  static const ::sdv::edge::comfort::seats::v1::Position& position(const Seat* msg);
};

const ::sdv::edge::comfort::seats::v1::SeatLocation&
Seat::_Internal::location(const Seat* msg) {
  return *msg->_impl_.location_;
}
const ::sdv::edge::comfort::seats::v1::Position&
Seat::_Internal::position(const Seat* msg) {
  return *msg->_impl_.position_;
}
Seat::Seat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.Seat)
}
Seat::Seat(const Seat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Seat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::sdv::edge::comfort::seats::v1::SeatLocation(*from._impl_.location_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::sdv::edge::comfort::seats::v1::Position(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.Seat)
}

inline void Seat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Seat::~Seat() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.Seat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Seat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Seat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Seat::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.Seat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Seat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sdv.edge.comfort.seats.v1.SeatLocation location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sdv.edge.comfort.seats.v1.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Seat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.Seat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.SeatLocation location = 1;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .sdv.edge.comfort.seats.v1.Position position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.Seat)
  return target;
}

size_t Seat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.Seat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdv.edge.comfort.seats.v1.SeatLocation location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .sdv.edge.comfort.seats.v1.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Seat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Seat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Seat::GetClassData() const { return &_class_data_; }


void Seat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Seat*>(&to_msg);
  auto& from = static_cast<const Seat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.Seat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::sdv::edge::comfort::seats::v1::SeatLocation::MergeFrom(
        from._internal_location());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::sdv::edge::comfort::seats::v1::Position::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Seat::CopyFrom(const Seat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.Seat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seat::IsInitialized() const {
  return true;
}

void Seat::InternalSwap(Seat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Seat, _impl_.position_)
      + sizeof(Seat::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(Seat, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Seat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[6]);
}

// ===================================================================

class SeatLocation::_Internal {
 public:
};

SeatLocation::SeatLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.SeatLocation)
}
SeatLocation::SeatLocation(const SeatLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeatLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.SeatLocation)
}

inline void SeatLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_){0u}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeatLocation::~SeatLocation() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.SeatLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeatLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeatLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeatLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.SeatLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeatLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeatLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.SeatLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.SeatLocation)
  return target;
}

size_t SeatLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.SeatLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeatLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeatLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeatLocation::GetClassData() const { return &_class_data_; }


void SeatLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeatLocation*>(&to_msg);
  auto& from = static_cast<const SeatLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.SeatLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeatLocation::CopyFrom(const SeatLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.SeatLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatLocation::IsInitialized() const {
  return true;
}

void SeatLocation::InternalSwap(SeatLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeatLocation, _impl_.index_)
      + sizeof(SeatLocation::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(SeatLocation, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeatLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[7]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sdv.edge.comfort.seats.v1.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){}
    , decltype(_impl_.cushion_){}
    , decltype(_impl_.lumbar_){}
    , decltype(_impl_.side_bolster_){}
    , decltype(_impl_.head_restraint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.base_, &from._impl_.base_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.head_restraint_) -
    reinterpret_cast<char*>(&_impl_.base_)) + sizeof(_impl_.head_restraint_));
  // @@protoc_insertion_point(copy_constructor:sdv.edge.comfort.seats.v1.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){0}
    , decltype(_impl_.cushion_){0}
    , decltype(_impl_.lumbar_){0}
    , decltype(_impl_.side_bolster_){0}
    , decltype(_impl_.head_restraint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:sdv.edge.comfort.seats.v1.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:sdv.edge.comfort.seats.v1.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.head_restraint_) -
      reinterpret_cast<char*>(&_impl_.base_)) + sizeof(_impl_.head_restraint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cushion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cushion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lumbar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lumbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 side_bolster = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.side_bolster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 head_restraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.head_restraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdv.edge.comfort.seats.v1.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 base = 1;
  if (this->_internal_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_base(), target);
  }

  // int32 cushion = 2;
  if (this->_internal_cushion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cushion(), target);
  }

  // int32 lumbar = 3;
  if (this->_internal_lumbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lumbar(), target);
  }

  // int32 side_bolster = 4;
  if (this->_internal_side_bolster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_side_bolster(), target);
  }

  // int32 head_restraint = 5;
  if (this->_internal_head_restraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_head_restraint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdv.edge.comfort.seats.v1.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdv.edge.comfort.seats.v1.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 base = 1;
  if (this->_internal_base() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_base());
  }

  // int32 cushion = 2;
  if (this->_internal_cushion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cushion());
  }

  // int32 lumbar = 3;
  if (this->_internal_lumbar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lumbar());
  }

  // int32 side_bolster = 4;
  if (this->_internal_side_bolster() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_side_bolster());
  }

  // int32 head_restraint = 5;
  if (this->_internal_head_restraint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head_restraint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sdv.edge.comfort.seats.v1.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_base() != 0) {
    _this->_internal_set_base(from._internal_base());
  }
  if (from._internal_cushion() != 0) {
    _this->_internal_set_cushion(from._internal_cushion());
  }
  if (from._internal_lumbar() != 0) {
    _this->_internal_set_lumbar(from._internal_lumbar());
  }
  if (from._internal_side_bolster() != 0) {
    _this->_internal_set_side_bolster(from._internal_side_bolster());
  }
  if (from._internal_head_restraint() != 0) {
    _this->_internal_set_head_restraint(from._internal_head_restraint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdv.edge.comfort.seats.v1.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.head_restraint_)
      + sizeof(Position::_impl_.head_restraint_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fseats_2eproto_getter, &descriptor_table_service_2fseats_2eproto_once,
      file_level_metadata_service_2fseats_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace seats
}  // namespace comfort
}  // namespace edge
}  // namespace sdv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::MoveRequest*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::MoveReply*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::MoveReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::MoveReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::MoveComponentRequest*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::MoveComponentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::MoveComponentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::MoveComponentReply*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::MoveComponentReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::MoveComponentReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::CurrentPositionRequest*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::CurrentPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::CurrentPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::CurrentPositionReply*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::CurrentPositionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::CurrentPositionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::Seat*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::Seat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::Seat >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::SeatLocation*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::SeatLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::SeatLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::sdv::edge::comfort::seats::v1::Position*
Arena::CreateMaybeMessage< ::sdv::edge::comfort::seats::v1::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdv::edge::comfort::seats::v1::Position >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
