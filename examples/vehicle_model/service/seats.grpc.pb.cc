// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/seats.proto

#include "service/seats.pb.h"
#include "service/seats.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sdv {
namespace edge {
namespace comfort {
namespace seats {
namespace v1 {

static const char* Seats_method_names[] = {
  "/sdv.edge.comfort.seats.v1.Seats/Move",
  "/sdv.edge.comfort.seats.v1.Seats/MoveComponent",
  "/sdv.edge.comfort.seats.v1.Seats/CurrentPosition",
};

std::unique_ptr< Seats::Stub> Seats::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Seats::Stub> stub(new Seats::Stub(channel, options));
  return stub;
}

Seats::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Move_(Seats_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveComponent_(Seats_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentPosition_(Seats_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Seats::Stub::Move(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest& request, ::sdv::edge::comfort::seats::v1::MoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sdv::edge::comfort::seats::v1::MoveRequest, ::sdv::edge::comfort::seats::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void Seats::Stub::async::Move(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest* request, ::sdv::edge::comfort::seats::v1::MoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sdv::edge::comfort::seats::v1::MoveRequest, ::sdv::edge::comfort::seats::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void Seats::Stub::async::Move(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest* request, ::sdv::edge::comfort::seats::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::MoveReply>* Seats::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sdv::edge::comfort::seats::v1::MoveReply, ::sdv::edge::comfort::seats::v1::MoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::MoveReply>* Seats::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Seats::Stub::MoveComponent(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest& request, ::sdv::edge::comfort::seats::v1::MoveComponentReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sdv::edge::comfort::seats::v1::MoveComponentRequest, ::sdv::edge::comfort::seats::v1::MoveComponentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveComponent_, context, request, response);
}

void Seats::Stub::async::MoveComponent(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest* request, ::sdv::edge::comfort::seats::v1::MoveComponentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sdv::edge::comfort::seats::v1::MoveComponentRequest, ::sdv::edge::comfort::seats::v1::MoveComponentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveComponent_, context, request, response, std::move(f));
}

void Seats::Stub::async::MoveComponent(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest* request, ::sdv::edge::comfort::seats::v1::MoveComponentReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::MoveComponentReply>* Seats::Stub::PrepareAsyncMoveComponentRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sdv::edge::comfort::seats::v1::MoveComponentReply, ::sdv::edge::comfort::seats::v1::MoveComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::MoveComponentReply>* Seats::Stub::AsyncMoveComponentRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Seats::Stub::CurrentPosition(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest& request, ::sdv::edge::comfort::seats::v1::CurrentPositionReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sdv::edge::comfort::seats::v1::CurrentPositionRequest, ::sdv::edge::comfort::seats::v1::CurrentPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrentPosition_, context, request, response);
}

void Seats::Stub::async::CurrentPosition(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest* request, ::sdv::edge::comfort::seats::v1::CurrentPositionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sdv::edge::comfort::seats::v1::CurrentPositionRequest, ::sdv::edge::comfort::seats::v1::CurrentPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentPosition_, context, request, response, std::move(f));
}

void Seats::Stub::async::CurrentPosition(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest* request, ::sdv::edge::comfort::seats::v1::CurrentPositionReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::CurrentPositionReply>* Seats::Stub::PrepareAsyncCurrentPositionRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sdv::edge::comfort::seats::v1::CurrentPositionReply, ::sdv::edge::comfort::seats::v1::CurrentPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrentPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sdv::edge::comfort::seats::v1::CurrentPositionReply>* Seats::Stub::AsyncCurrentPositionRaw(::grpc::ClientContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrentPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Seats::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seats_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seats::Service, ::sdv::edge::comfort::seats::v1::MoveRequest, ::sdv::edge::comfort::seats::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seats::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sdv::edge::comfort::seats::v1::MoveRequest* req,
             ::sdv::edge::comfort::seats::v1::MoveReply* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seats_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seats::Service, ::sdv::edge::comfort::seats::v1::MoveComponentRequest, ::sdv::edge::comfort::seats::v1::MoveComponentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seats::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sdv::edge::comfort::seats::v1::MoveComponentRequest* req,
             ::sdv::edge::comfort::seats::v1::MoveComponentReply* resp) {
               return service->MoveComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seats_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seats::Service, ::sdv::edge::comfort::seats::v1::CurrentPositionRequest, ::sdv::edge::comfort::seats::v1::CurrentPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seats::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest* req,
             ::sdv::edge::comfort::seats::v1::CurrentPositionReply* resp) {
               return service->CurrentPosition(ctx, req, resp);
             }, this)));
}

Seats::Service::~Service() {
}

::grpc::Status Seats::Service::Move(::grpc::ServerContext* context, const ::sdv::edge::comfort::seats::v1::MoveRequest* request, ::sdv::edge::comfort::seats::v1::MoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Seats::Service::MoveComponent(::grpc::ServerContext* context, const ::sdv::edge::comfort::seats::v1::MoveComponentRequest* request, ::sdv::edge::comfort::seats::v1::MoveComponentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Seats::Service::CurrentPosition(::grpc::ServerContext* context, const ::sdv::edge::comfort::seats::v1::CurrentPositionRequest* request, ::sdv::edge::comfort::seats::v1::CurrentPositionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sdv
}  // namespace edge
}  // namespace comfort
}  // namespace seats
}  // namespace v1

